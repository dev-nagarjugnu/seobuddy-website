// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Your User model, updated for Auth.js, password hashing, and messages
model User {
  id            String    @id @default(uuid())
  email         String?   @unique
  name          String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
  accounts      Account[]
  sessions      Session[]
  settings      Settings?
  blogPosts     BlogPost[]
  sentMessages  Message[] @relation("SenderMessages")    // <-- THIS LINE IS CRUCIAL
  receivedMessages Message[] @relation("RecipientMessages") // <-- THIS LINE IS CRUCIAL
}

// The Order model for booking services
model Order {
  id          String    @id @default(uuid()) // Unique ID for each order
  userId      String                         // ID of the user who placed this order
  user        User      @relation(fields: [userId], references: [id]) // Links this order to a User

  serviceType String    // E.g., "Technical SEO", "On-Page SEO", etc.
  description String?   // Optional: User can describe their needs
  status      String    @default("Pending") // E.g., "Pending", "Processing", "Completed", "Cancelled"
  orderDate   DateTime  @default(now())   // When the order was placed
  updatedAt   DateTime  @updatedAt         // When the order was last updated
  
  // Admin response fields
  adminNotes  String?   @db.Text           // Admin's notes/remarks for the order
  adminResponseDate DateTime?              // When admin responded to the order
  emailSent   Boolean   @default(false)    // Whether notification email was sent to client
  emailSentAt DateTime?                    // When the email was sent
}

// NEW: The Message model for chat functionality -- THIS WAS MISSING!
model Message {
  id           String    @id @default(uuid())
  senderId     String    // ID of the user who sent the message
  sender       User      @relation("SenderMessages", fields: [senderId], references: [id]) // Link to the sending user

  recipientId  String?   // Optional: ID of the user who receives the message (for private chats or if you want an admin to message a specific user)
  recipient    User?     @relation("RecipientMessages", fields: [recipientId], references: [id]) // Link to recipient user

  content      String    @db.Text // The actual message text
  timestamp    DateTime  @default(now())
  read         Boolean   @default(false) // Whether the message has been read
}

// Models required by @auth/prisma-adapter for authentication
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Settings model for storing user preferences
model Settings {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  settings  String   @db.Text // JSON string of settings
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

// BlogPost model for blog management
model BlogPost {
  id            String    @id @default(uuid())
  title         String
  slug          String    @unique
  excerpt       String    @db.Text
  content       String    @db.Text
  authorId      String
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  status        String    @default("draft") // draft, published
  tags          String[]  @default([])
  featuredImage String?
  readTime      Int?
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("blog_posts")
}

enum Role {
  USER
  ADMIN
}

model Post {
  id          String   @id @default(uuid())
  title       String
  slug        String   @unique
  content     String
  excerpt     String?
  featuredImg String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  scheduledAt DateTime?
  author      Author   @relation(fields: [authorId], references: [id])
  authorId    String
  categories  Category[] @relation("PostCategories")
  tags        Tag[]      @relation("PostTags")
}

model Author {
  id        String   @id @default(uuid())
  name      String
  bio       String?
  avatar    String?
  posts     Post[]
}

model Category {
  id    String   @id @default(uuid())
  name  String   @unique
  posts Post[]   @relation("PostCategories")
}

model Tag {
  id    String   @id @default(uuid())
  name  String   @unique
  posts Post[]   @relation("PostTags")
}